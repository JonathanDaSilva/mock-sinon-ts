var chai = require('chai');
var expect = chai.expect;
var Mock_ts_1 = require("./../src/Mock.js");
var Bar = (function () {
    function Bar() {
        this.test = 'test';
    }
    Bar.prototype.foobar = function () { };
    Bar.prototype.test1 = function () { };
    return Bar;
})();
Bar.prototype.test2 = 'foobar';
var barMethods = [
    'foobar',
    'test1',
];
var Foo = (function () {
    function Foo() {
        this.test = 'test';
        this.bar = 'bar';
    }
    Foo.bar = function () { };
    Foo.not = function () { };
    Foo.prototype.foobar = function () { };
    Foo.prototype.test1 = function () { };
    Foo.prototype.test2 = function () { };
    Foo.prototype.test3 = function () { };
    return Foo;
})();
var fooMethods = [
    'foobar',
    'test1',
    'test2',
    'test3',
];
describe("Mock", function () {
    var fooMock;
    var barMock;
    beforeEach(function () {
        fooMock = Mock_ts_1.Mock(Foo);
        barMock = Mock_ts_1.Mock(Bar);
    });
    it("should have only the instance methods", function () {
        var fooMockMethods = Object.keys(fooMock);
        var barMockMethods = Object.keys(barMock);
        expect(fooMockMethods).to.have.length(fooMethods.length);
        expect(fooMockMethods).to.have.members(fooMethods);
        expect(barMockMethods).to.have.length(barMethods.length);
        expect(barMockMethods).to.have.members(barMethods);
    });
    it("should put a spy on every method", function () {
        for (var _i = 0; _i < fooMethods.length; _i++) {
            var method = fooMethods[_i];
            expect(fooMock[method]).to.be.a('function');
            expect(fooMock[method]).to.contain.all.keys(['called', 'calledOnce']);
        }
        for (var _a = 0; _a < barMethods.length; _a++) {
            var method = barMethods[_a];
            expect(barMock[method]).to.be.a('function');
            expect(barMock[method]).to.contain.all.keys(['called', 'calledOnce']);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RzL01vY2suc3BlYy50cyJdLCJuYW1lcyI6WyJCYXIiLCJCYXIuY29uc3RydWN0b3IiLCJCYXIuZm9vYmFyIiwiQmFyLnRlc3QxIiwiRm9vIiwiRm9vLmNvbnN0cnVjdG9yIiwiRm9vLmJhciIsIkZvby5ub3QiLCJGb28uZm9vYmFyIiwiRm9vLnRlc3QxIiwiRm9vLnRlc3QyIiwiRm9vLnRlc3QzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFZLElBQUksV0FBTyxNQUN2QixDQUFDLENBRDRCO0FBRTdCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7QUFFeEIsd0JBQXFCLGtCQUVyQixDQUFDLENBRnNDO0FBRXZDO0lBTUlBO1FBQ0lDLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLE1BQU1BLENBQUFBO0lBQ3RCQSxDQUFDQTtJQU5NRCxvQkFBTUEsR0FBYkEsY0FBaUJFLENBQUNBO0lBQ1hGLG1CQUFLQSxHQUFaQSxjQUFnQkcsQ0FBQ0E7SUFNckJILFVBQUNBO0FBQURBLENBVEEsQUFTQ0EsSUFBQTtBQUNELEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQTtBQUM5QixJQUFJLFVBQVUsR0FBRztJQUNiLFFBQVE7SUFDUixPQUFPO0NBQ1YsQ0FBQTtBQUVEO0lBQUFJO1FBR1dDLFNBQUlBLEdBQVdBLE1BQU1BLENBQUFBO1FBQ3JCQSxRQUFHQSxHQUFZQSxLQUFLQSxDQUFBQTtJQUsvQkEsQ0FBQ0E7SUFSaUJELE9BQUdBLEdBQWpCQSxjQUFxQkUsQ0FBQ0E7SUFDUkYsT0FBR0EsR0FBakJBLGNBQXFCRyxDQUFDQTtJQUdmSCxvQkFBTUEsR0FBYkEsY0FBaUJJLENBQUNBO0lBQ1hKLG1CQUFLQSxHQUFaQSxjQUFnQkssQ0FBQ0E7SUFDVkwsbUJBQUtBLEdBQVpBLGNBQWdCTSxDQUFDQTtJQUNWTixtQkFBS0EsR0FBWkEsY0FBZ0JPLENBQUNBO0lBQ3JCUCxVQUFDQTtBQUFEQSxDQVRBLEFBU0NBLElBQUE7QUFFRCxJQUFJLFVBQVUsR0FBRztJQUNiLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87Q0FDVixDQUFBO0FBRUQsUUFBUSxDQUFDLE1BQU0sRUFBRTtJQUNiLElBQUksT0FBTyxDQUFBO0lBQ1gsSUFBSSxPQUFPLENBQUE7SUFFWCxVQUFVLENBQUM7UUFDUCxPQUFPLEdBQUcsY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ25CLE9BQU8sR0FBRyxjQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDdkIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsdUNBQXVDLEVBQUU7UUFDeEMsSUFBSSxjQUFjLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUN6QyxJQUFJLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXpDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDeEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRWxELE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDeEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3RELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLGtDQUFrQyxFQUFFO1FBQ25DLEdBQUcsQ0FBQSxDQUFlLFVBQVUsRUFBeEIsc0JBQVUsRUFBVixJQUF3QixDQUFDO1lBQXpCLElBQUksTUFBTSxHQUFJLFVBQVUsSUFBZDtZQUNWLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUMzQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUE7U0FDeEU7UUFFRCxHQUFHLENBQUEsQ0FBZSxVQUFVLEVBQXhCLHNCQUFVLEVBQVYsSUFBd0IsQ0FBQztZQUF6QixJQUFJLE1BQU0sR0FBSSxVQUFVLElBQWQ7WUFDVixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDM0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFBO1NBQ3hFO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUMsQ0FBQSIsImZpbGUiOiJ0ZXN0cy9Nb2NrLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
